(function () {
'use strict';

var getOffset = function (evt) {
	var el = evt.target;
	var x = 0;
	var y = 0;

	while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
		x += el.offsetLeft - el.scrollLeft;
		y += el.offsetTop - el.scrollTop;
		el = el.offsetParent;
	}

	x = evt.clientX - x;
	y = evt.clientY - y;

	return { x: x, y: y };
};

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StarPlusCanvas = function () {
	function StarPlusCanvas(el) {
		_classCallCheck(this, StarPlusCanvas);

		this.canvas = el;
		this.ctx = this.canvas.getContext('2d');
		this.focalPoints = [];
		this.isPlaying = false;
		this.img = null;
	}

	_createClass(StarPlusCanvas, [{
		key: 'init',
		value: function init(img) {
			this.canvas.width = Math.min(window.innerWidth, 600);
			this.canvas.height = this.canvas.width / img.width * img.height;

			this.img = img;
			img.style.display = 'none';

			this.canvas.addEventListener('click', this.addPoint.bind(this));

			this.drawImage(img);
		}
	}, {
		key: 'addPoint',
		value: function addPoint(e) {
			this.ctx.strokeText('x', e.layerX, e.layerY);
			this.focalPoints.push(getOffset(e));
		}
	}, {
		key: 'drawImage',
		value: function drawImage() {
			this.ctx.drawImage(this.img, 0, 0, this.img.width, this.img.height, 0, 0, this.canvas.width, this.canvas.height);
		}
	}, {
		key: 'padFocalPoints',
		value: function padFocalPoints() {
			if (this.focalPoints.length < 10) {
				for (var i = this.focalPoints.length; i < 10; i++) {
					this.focalPoints.push({
						x: Math.random() * this.canvas.width,
						y: Math.random() * this.canvas.height
					});
				}
			}
			return this.focalPoints;
		}
	}, {
		key: 'start',
		value: function start() {
			var _this = this;

			this.isPlaying = true;
			var zConf = this.padFocalPoints().map(function (pt) {
				return {
					ctx: _this.ctx,
					start: pt,
					maxIterations: Math.random() * 150 + 100,
					factor: Math.random() * 0.02 + 1.005
				};
			});

			this.zoom(zConf[0]).then(function () {
				return _this.filter('brightness(10)', 100);
			}).then(function () {
				return _this.zoom(zConf[1]);
			}).then(function () {
				_this.filter('hue-rotate(50deg)', 400);
				return _this.zoom(zConf[2]);
			}).then(function () {
				_this.filter('hue-rotate(-50deg)', 400);
				return _this.zoom(zConf[3]);
			}).then(function () {
				return _this.zoom(zConf[4]);
			}).then(function () {
				_this.filter('invert(100%)', 300);
				return _this.zoom(zConf[5]);
			}).then(function () {
				return _this.zoom(zConf[6]);
			}).then(function () {
				_this.filter('brightness(1.2)', 400);
				return _this.zoom(zConf[7]);
			}).then(function () {
				return _this.filter('invert(100%);blur(2px)', 2000);
			}).then(function () {
				return _this.zoom(zConf[8]);
			}).then(function () {
				_this.filter('hue-rotate(120deg)', 400);
				return _this.zoom(zConf[9]);
			});
		}
	}, {
		key: 'stop',
		value: function stop() {
			this.isPlaying = false;
			this.ctx.restore();
		}
	}, {
		key: 'zoom',
		value: function zoom(opts, iterations) {
			var _this2 = this;

			this.ctx.save();
			iterations = iterations || 0;
			var doZoom = function doZoom() {
				if (!_this2.isPlaying) return;
				return new Promise(function (resolve) {
					_this2.ctx.translate(opts.start.x, opts.start.y);
					if (iterations++ < opts.maxIterations / 2) {
						_this2.ctx.scale(opts.factor, opts.factor);
					} else if (iterations < opts.maxIterations) {
						_this2.ctx.scale(1 / opts.factor, 1 / opts.factor);
					} else {
						_this2.ctx.restore();
						return resolve('asda');
					}

					_this2.ctx.translate(-opts.start.x, -opts.start.y);
					_this2.drawImage();
					requestAnimationFrame(function () {
						resolve(doZoom(opts, iterations));
					});
				});
			};

			return Promise.resolve(doZoom());
		}
	}, {
		key: 'filter',
		value: function filter(effect, duration) {
			var _this3 = this;

			if (!this.isPlaying) return;

			return new Promise(function (resolve) {
				_this3.ctx.filter = effect;
				_this3.drawImage();
				setTimeout(function () {
					_this3.ctx.filter = 'none';
					_this3.drawImage();
					return resolve();
				}, duration);
			});
		}
	}, {
		key: 'stream',
		get: function get() {
			return this.canvas.captureStream();
		}
	}]);

	return StarPlusCanvas;
}();

var _createClass$1 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AudioPlayer = function () {
	function AudioPlayer(el) {
		_classCallCheck$1(this, AudioPlayer);

		this.el = el;
	}

	_createClass$1(AudioPlayer, [{
		key: "start",
		value: function start() {
			this.el.play();
		}
	}, {
		key: "stop",
		value: function stop() {
			this.el.pause();
			this.el.currentTime = 0;
		}
	}]);

	return AudioPlayer;
}();

var _createClass$2 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Recorder = function () {
	function Recorder(stream) {
		_classCallCheck$2(this, Recorder);

		this.stream = stream;
		this.mediaSource = new MediaSource();
		this.mediaRecorder = null;
		this.recordedBlobs = [];
		this.sourceBuffer = null;
	}

	_createClass$2(Recorder, [{
		key: 'start',
		value: function start() {
			var _this = this;

			var options = { mimeType: 'video/webm' };
			//reset the recorded blobs
			this.recordedBlobs = [];

			try {
				this.mediaRecorder = new MediaRecorder(this.stream, options);
			} catch (e0) {
				console.log('Unable to create MediaRecorder with options Object: ', e0);
				//if it fails, try another codec
				try {
					options.mimeType = 'video/webm,codecs=vp9';
					this.mediaRecorder = new MediaRecorder(this.stream, options);
				} catch (e1) {
					console.log('MediaRecorder is not supported by this browser');
					return;
				}
			}

			//store the data whenever the mediarecorder gives us something
			var handleDataAvailable = function handleDataAvailable(event) {
				if (event.data && event.data.size > 0) {
					_this.recordedBlobs.push(event.data);
				}
			};

			this.mediaRecorder.ondataavailable = handleDataAvailable;

			//start recording
			this.mediaRecorder.start(100);
		}
	}, {
		key: 'stop',
		value: function stop() {
			this.mediaRecorder.stop();
		}
	}, {
		key: 'download',
		value: function download() {
			var blob = new Blob(this.recordedBlobs, { type: 'video/webm' });
			var url = window.URL.createObjectURL(blob);
			var a = document.createElement('a');
			a.style.display = 'none';
			a.href = url;
			a.download = 'star-plus.webm';
			document.body.appendChild(a);
			a.click();
			setTimeout(function () {
				document.body.removeChild(a);
				window.URL.revokeObjectURL(url);
			}, 100);
		}
	}]);

	return Recorder;
}();

var imageLoader = function (el, onLoadFn) {
	var img = new Image();

	el.addEventListener('change', function (e) {
		var reader = new FileReader();
		reader.onload = function (event) {

			img.onload = function () {
				onLoadFn(img);
			};
			img.src = event.target.result;
		};
		reader.readAsDataURL(e.target.files[0]);
	}, false);
};

var init = function init() {

	var canvasEl = document.getElementById('c');
	var audioEl = document.getElementById('a');
	var imageLoaderEl = document.getElementById('imageLoader');
	var startBtn = document.getElementById('start');
	var stopBtn = document.getElementById('stop');

	var spCanvas = new StarPlusCanvas(canvasEl);
	var audioPlayer = new AudioPlayer(audioEl);
	var recorder = new Recorder(spCanvas.stream);

	imageLoader(imageLoaderEl, spCanvas.init.bind(spCanvas));

	startBtn.addEventListener('click', function () {
		spCanvas.start();
		audioPlayer.start();
		recorder.start();
	});
	stopBtn.addEventListener('click', function () {
		spCanvas.stop();
		audioPlayer.stop();
		recorder.stop();
		recorder.download();
	});
};

init();

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
